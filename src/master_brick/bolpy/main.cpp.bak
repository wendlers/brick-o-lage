/*
 * This file is part of the mps430-ioexp project.
 *
 * Copyright (C) 2011 Stefan Wendler <sw@kaltpost.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <iostream>

#include <boost/python.hpp>

#include "brick.hpp"

namespace bpy = boost::python;

namespace bol
{
class PyBrickWrap
{
private:

	Brick *brick;

public:
	
	PyBrickWrap()
	{
		brick = NULL;
	}

	PyBrickWrap(Brick *aBrick)
	{
		brick = aBrick;
	}

	void sleep(int s)
	{
		::sleep(s);
	}

	void set(const char *name, int value)
	{
		if(brick != NULL)
		{
			brick->setPortValue(name, value);
		}
	}

	int get(const char *name)
	{
		if(brick != NULL)
		{
			return brick->getPortValue(name);
		}

		return -1;
	}
};
}

int main( int argc, char **argv) 
{
    try 
	{
		// get brick bus instance
		bol::BrickBus bb; 
		
		// ask for DIO brick on address 0x48
		// if no brick at 0x48 or brick of different type, exception is thrown 
		bol::Brick *b = bb.getBrickByAddress(0x48, bol::BrickType::DIO);

		// lower bricks priority for syncing (0 = highest)
		b->setSyncPriority(3);

	 	Py_Initialize();

		bpy::object main_module = bpy::import("__main__");

		bpy::object main_namespace = main_module.attr("__dict__");

		main_namespace["Brick"] = bpy::class_<bol::PyBrickWrap>("Brick")
			.def("set",&bol::PyBrickWrap::set)
			.def("get",&bol::PyBrickWrap::get);

		bol::PyBrickWrap bw(b);

		main_namespace["dio1"] = bpy::ptr(&bw);

   		bpy::object ignored = exec_file(
			"script.bpy",
			main_namespace);
 } 
	catch(bpy::error_already_set) 
	{
        PyErr_Print();
    }
}
